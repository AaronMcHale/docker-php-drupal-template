#!/usr/bin/env sh
# Script to execute composer inside a Docker container
#
# The following environment variables can be set to override specific values:
# - COMPOSER_HOME
# See comments below for documentation on how these work.

# Exit this script if any exit with a non-zero state
set -e

# Ensure we are in the project root directory. This still allows the script
# to work even if we call it from a different directory in or out of the
# project.
cd "${0%/*}"

## Export keys and values defined in the `.env` file.
if [ -f ".env" ]; then
  # Source the .env file but ignore comments
  export $(grep -v '^#' .env | xargs)
fi

# Mount the Composer Home from the host system into the container, this way the
# container can write to a central cache which persists and can be reused across
# different projects. Use the `$COMPOSER_HOME` environment variable or default to
# `$HOME/.composer` if not set.
COMPOSER_HOME=${COMPOSER_HOME:-$HOME/.composer}
if [ ! -d "$COMPOSER_HOME" ]; then
  mkdir "$COMPOSER_HOME"
fi
echo "Using $COMPOSER_HOME for cache."

# Run the Docker container, passing in the various arguments we defined above.
# `$*` allows us to pass in all of the parameters that were passed to this script,
# this way we can just forward them onto the Composer command.
command="$*"
if [ -z "$command" ]; then
  command="composer"
fi

# Run Composer using the drupal-cli service, container is removed on exit
./docker-compose run \
  --rm \
  $docker_args \
  --volume "$COMPOSER_HOME"":/home/composer" \
  --entrypoint /usr/local/bin/composer-entrypoint.sh \
  drupal-cli \
  $command
