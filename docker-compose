#!/usr/bin/env sh
## Script to execute `docker compose` commands with the correct environment.
##
## Any parameters passed to this script will be passed through to
## `docker compose`, for example running `./docker-compose up -d` will
## result in the `up -d` being passed through to `docker compose`.
##
## The following environment variables can be set to override specific values:
## - DOCKER_COMPOSE_PROJECT_NAME
## See comments below for documentation on how these work.

## Exit this script if any exit with a non-zero state
set -e

## Ensure we are in the project root directory. This still allows the script
## to work even if we call it from a different directory in or out of the
## project.
cd "${0%/*}"

## Get the directory name of this directory, use that as the project name.
project_name="${PWD##*/}"

## Used in the docker-compose.yml to set the name of the image used by the
## drupal services.
export DRUPAL_IMAGE_NAME="$project_name"

## DOCKER_COMPOSE_PROJECT_NAME environment variable.
## Can be used to override the name of the Docker Compose project name.
DOCKER_COMPOSE_PROJECT_NAME=${DOCKER_COMPOSE_PROJECT_NAME:-"$project_name"}

# Get the ID of the current user and user's group, used to run the containers.
export ENV_USER_ID="$(id -u)"
export ENV_GROUP_ID="$(id -g)"

## Export keys and values defined in the `.env` file.
if [ -f ".env" ]; then
  # Source the .env file but ignore comments
  export $(grep -v '^#' .env | xargs)
  # Include the `.env` file at the root of the project if it exists, so
  # that docker compose will also use it.
  env_file_args="--env-file ../.env"
else
  env_file_args=""
fi

## We need to run `docker compose` from the `docker` sub-directory.
cd "docker"

# If we have an environment-specific docker-compose file, tell Docker
# Compose to load that in addition to the base docker-compose file.
if [ -f "docker-compose.""$ENVIRONMENT"".yml" ]; then
  export COMPOSE_FILE="docker-compose.yml:docker-compose.""$ENVIRONMENT"".yml"
fi

## Run `docker compose` with the constructed arguments, and pass through
## any arguments/parameters passed to this script.
docker compose \
  --project-name "$DOCKER_COMPOSE_PROJECT_NAME" \
  $compose_file_args \
  $env_file_args \
  $@
