## Example .env file
##
## Copy this file and name it .env, you can then uncomment and set the variables
## that you want to use. The variables here are used in various places of the
## project, for example Docker Compose and PHP Composer.  You can also add your
## own environment variables as required.

## DOCKER_COMPOSE_ENV
## Specifies which environment this is, supported values are:
##   local, dev, test, prod
##
## This will result in environment-specific overrides being used when running
## `./docker-compose` and when building the Drupal `Dockerfile`, see
## `docker/Dockerfile`, and `./docoker/docker-composer.local.yml` for example.
##
## For local, dev and test: a mailhog container is provided and configured
## when building the Dockerfile, along with PHP ini settings which are
## useful for development.
##
## For prod: PHP ini settings useful for running in production environments
## are used.
DOCKER_COMPOSE_ENV=local

## DOCKER_COMPOSE_PROJECT_NAME
## Can be used to override the project name used by Docker Compose. Docker Compose
## will use this name of the parent directory as the project name, therefor unless
## you need to override that, setting this is not required.
# DOCKER_COMPOSE_PROJECT_NAME=my-project

## COMPOSER_HOME
## Override the directory that Composer will use as its home directory, this is
## mostly used for cache. Setting this is not required and Composer will default
## to the .composer folder in the user's home directory. The directory used will
## be mounted inside the running container, use with caution.
# COMPOSER_HOME=$HOME/.composer
