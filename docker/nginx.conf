# Nginx configuration file.

# We log errors to Standard Error, this means the log messages will be
# agregated with logs from other containers, giving a more holistic view.
# Not having Nginx log to the filesystem can also have performance
# enhancements, as writing logs to the filesystem, especially when slower
# mechanical hard drivers are used, can be a performance bottleneck.
error_log  /dev/stderr warn;

pid        /tmp/nginx.pid;

# Worker processes are single threaded, so we let Nginx spawn multiple worker
# processes to help balance the load of requests, this can be 2 * number of
# CPU cores available. Keep in mind that for most work loads anything above
# 2-4 workers is overkill as nginx will hit other bottlenecks before the CPU
# becomes an issue and usually you’ll just have idle processes.
worker_processes 4;

events {
    # Limits how many connections each worker process can maintain at any
    # given time. Nginx can close keep-alive connections if it hits the
    # limit so we don’t have to worry about our keep-alive value here.
    # We're more concerned with the amount of currently active
    # connections that nginx is handling.
    #
    # The formula for maximum number of connections is then:
    # worker_processes * worker_connections * (K / average $request_time)
    # K is the amount of currently active connections. Additionally, for
    # the value K, we also have to consider reverse proxying which will
    # open up an additional connection.
    #
    # Ideally we want this value to be high to allow for a significant
    # number of users. If we consider 2 connections per asset from the
    # user, and additional connections to the PHP backend to service
    # requests, we can see how the default 1024 may suddenly become
    # a limiting factor.
    worker_connections 2048;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Configure access logging Format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Generally speaking we don't need access logs to be on, normally Nginx
    # will only be directly handling requests for static assets (CSS, JS, etc)
    # and we don't ususally care about access to these resources. For most
    # requests Nginx will be handing off processing to PHP-FPM, and PHP-FPM
    # may be set up to output access requests (either to STDOUT our to file).
    #
    # Additionally, not having Nginx log to the filesystem can also have
    # performance enhancements, as writing logs to the filesystem, especially
    # when slower mechanical hard drivers are used, can be a performance
    # bottleneck and increase request times.
    access_log off;
    # If we do want Nginx access logs, uncomment the following to send access
    # to Standard Out, this means the log messages will be agregated with logs
    # from other containers, giving a more holistic view.
    ##access_log /dev/stdout main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # We need to tell Nginx to write to the /tmp directory because we run the container
    # with a read-only file system, and mount a temporary writable file system at /tmp.
    client_body_temp_path /tmp/nginx_client_temp;
    proxy_temp_path       /tmp/nginx_proxy_temp_path;
    fastcgi_temp_path     /tmp/nginx_fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx_uwsgi_temp;
    scgi_temp_path        /tmp/nginx_scgi_temp;

    #######
    ## Configure the web server for Drupal
    #######
    server {
        # We need to use ports above 1024 so that Nginx can run as a non-privileged user
        listen       8080;
        listen  [::]:8080;
        server_name _;

        root   /app;
        index  index.php;

        # Make redirects issued by Nginx relative
        absolute_redirect off;

        # Prevent clients from accessing hidden files (starting with a dot)
        # This is particularly important if you store .htpasswd files in the site hierarchy
        # Access to `/.well-known/` is allowed.
        # https://www.mnot.net/blog/2010/04/07/well-known
        # https://tools.ietf.org/html/rfc5785
        location ~* /\.(?!well-known\/) {
            deny all;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        location ~ ^/sites/.*/private/ {
            return 403;
        }

        location / {
            try_files $uri /index.php?$query_string;
        }

        location @rewrite {
            rewrite ^/(.*)$ /index.php?q=$1;
        }

        # In Drupal 8, we must also match new paths where the '.php' appears in
        # the middle, such as update.php/selection. The rule we use is strict,
        # and only allows this pattern with the update.php front controller.
        # This allows legacy path aliases in the form of
        # blog/index.php/legacy-path to continue to route to Drupal nodes. If
        # you do not have any paths like that, then you might prefer to use a
        # laxer rule, such as:
        location ~ \.php(/|$) {
        # The laxer rule will continue to work if Drupal uses this new URL
        # pattern with front controllers other than update.php in a future
        # release.
        #location ~ '\.php$|^/update.php' {
            # regex to split $uri to $fastcgi_script_name and $fastcgi_path
            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            # Check that the PHP script exists before passing it
            try_files $fastcgi_script_name =404;

            # Bypass the fact that try_files resets $fastcgi_path_info
            # see: http://trac.nginx.org/nginx/ticket/321
            set $path_info $fastcgi_path_info;
            fastcgi_param PATH_INFO $path_info;

            # Block httpoxy attacks. See https://httpoxy.org/.
            fastcgi_param HTTP_PROXY "";

            fastcgi_param SERVER_NAME $host;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_param QUERY_STRING $query_string;
            #fastcgi_param HTTPS $fcgi_https;

            fastcgi_index index.php;

            fastcgi_intercept_errors off;

            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;

            include fastcgi_params;

            fastcgi_pass php-fpm:9000;
        }

        # Fighting with Styles? This little gem is amazing.
        location ~ ^/sites/.*/files/styles/ {
            log_not_found off;
            access_log off;
            try_files $uri @rewrite;
        }

        # Handle private files through Drupal. Private file's path can come
        # with a language prefix.
        location ~ ^(/[a-z\-]+)?/system/files/ {
            try_files $uri /index.php?$query_string;
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            try_files $uri @rewrite;
            expires max;
            log_not_found off;
        }
    }
}
