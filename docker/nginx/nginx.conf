# Nginx configuration file.
#
# This file is copied to the Nginx image/container on build, after changing
# this configuration run build.sh in the docker directory to copy updates
# to the Nginx image/container.

# We run the Nginx image as a non-root user, so Nginx ignores the "user"
# directive, if Nginx is ever run as root uncomment this.
##user  nginx;

# We log errors to Standard Error, this means the log messages will be
# agregated with logs from other containers, giving a more holistic view.
# Not having Nginx log to the filesystem can also have performance
# enhancements, as writing logs to the filesystem, especially when slower
# mechanical hard drivers are used, can be a performance bottleneck.
error_log  /dev/stderr warn;

pid        /tmp/nginx.pid;

# Worker processes are single threaded, so we let Nginx spawn multiple worker
# processes to help balance the load of requests, this can be 2 * number of
# CPU cores available. Keep in mind that for most work loads anything above
# 2-4 workers is overkill as nginx will hit other bottlenecks before the CPU
# becomes an issue and usually you’ll just have idle processes.
worker_processes 4;

events {
    # Limits how many connections each worker process can maintain at any
    # given time. Nginx can close keep-alive connections if it hits the
    # limit so we don’t have to worry about our keep-alive value here.
    # We're more concerned with the amount of currently active
    # connections that nginx is handling.
    #
    # The formula for maximum number of connections is then:
    # worker_processes * worker_connections * (K / average $request_time)
    # K is the amount of currently active connections. Additionally, for
    # the value K, we also have to consider reverse proxying which will
    # open up an additional connection.
    #
    # Ideally we want this value to be high to allow for a significant
    # number of users. If we consider 2 connections per asset from the
    # user, and additional connections to the PHP backend to service
    # requests, we can see how the default 1024 may suddenly become
    # a limiting factor.
    worker_connections 2048;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Configure access logging Format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Generally speaking we don't need access logs to be on, normally Nginx
    # will only be directly handling requests for static assets (CSS, JS, etc)
    # and we don't ususally care about access to these resources. For most
    # requests Nginx will be handing off processing to PHP-FPM, and PHP-FPM
    # may be set up to output access requests (either to STDOUT our to file).
    #
    # Additionally, not having Nginx log to the filesystem can also have
    # performance enhancements, as writing logs to the filesystem, especially
    # when slower mechanical hard drivers are used, can be a performance
    # bottleneck and increase request times.
    access_log off;
    # If we do want Nginx access logs, uncomment the following to send access
    # to Standard Out, this means the log messages will be agregated with logs
    # from other containers, giving a more holistic view.
    ##access_log /dev/stdout main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

	  client_body_temp_path /tmp/nginx_client_temp;
    proxy_temp_path       /tmp/nginx_proxy_temp_path;
    fastcgi_temp_path     /tmp/nginx_fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx_uwsgi_temp;
    scgi_temp_path        /tmp/nginx_scgi_temp;

    include /etc/nginx/conf.d/*.conf;
}
